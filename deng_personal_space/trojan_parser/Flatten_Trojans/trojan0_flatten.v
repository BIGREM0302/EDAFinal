/* Generated by Yosys 0.54 (git sha1 db72ec3bde296a9512b2d1e6fabf81cfb07c2c1b, clang++ 16.0.0 -fPIC -O3) */

module Trojan0(clk, rst, key, load);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  input clk;
  wire clk;
  wire \counter[0] ;
  wire \counter[10] ;
  wire \counter[11] ;
  wire \counter[12] ;
  wire \counter[13] ;
  wire \counter[14] ;
  wire \counter[15] ;
  wire \counter[16] ;
  wire \counter[17] ;
  wire \counter[18] ;
  wire \counter[19] ;
  wire \counter[1] ;
  wire \counter[2] ;
  wire \counter[3] ;
  wire \counter[4] ;
  wire \counter[5] ;
  wire \counter[6] ;
  wire \counter[7] ;
  wire \counter[8] ;
  wire \counter[9] ;
  input [127:0] key;
  wire [127:0] key;
  output [63:0] load;
  wire [63:0] load;
  input rst;
  wire rst;
  \or  _063_ (
    .A(rst),
    .B(\counter[1] ),
    .Y(_008_)
  );
  \not  _064_ (
    .A(rst),
    .Y(_043_)
  );
  \and  _065_ (
    .A(\counter[2] ),
    .B(_043_),
    .Y(_009_)
  );
  \and  _066_ (
    .A(\counter[3] ),
    .B(_043_),
    .Y(_010_)
  );
  \and  _067_ (
    .A(\counter[4] ),
    .B(_043_),
    .Y(_011_)
  );
  \or  _068_ (
    .A(\counter[5] ),
    .B(rst),
    .Y(_012_)
  );
  \or  _069_ (
    .A(\counter[6] ),
    .B(rst),
    .Y(_013_)
  );
  \and  _070_ (
    .A(\counter[7] ),
    .B(_043_),
    .Y(_014_)
  );
  \and  _071_ (
    .A(\counter[8] ),
    .B(_043_),
    .Y(_015_)
  );
  \and  _072_ (
    .A(\counter[9] ),
    .B(_043_),
    .Y(_016_)
  );
  \and  _073_ (
    .A(\counter[10] ),
    .B(_043_),
    .Y(_017_)
  );
  \and  _074_ (
    .A(\counter[11] ),
    .B(_043_),
    .Y(_018_)
  );
  \and  _075_ (
    .A(\counter[12] ),
    .B(_043_),
    .Y(_019_)
  );
  \or  _076_ (
    .A(\counter[13] ),
    .B(rst),
    .Y(_020_)
  );
  \or  _077_ (
    .A(\counter[14] ),
    .B(rst),
    .Y(_021_)
  );
  \and  _078_ (
    .A(\counter[15] ),
    .B(_043_),
    .Y(_022_)
  );
  \and  _079_ (
    .A(\counter[16] ),
    .B(_043_),
    .Y(_023_)
  );
  \and  _080_ (
    .A(\counter[17] ),
    .B(_043_),
    .Y(_024_)
  );
  \and  _081_ (
    .A(\counter[18] ),
    .B(_043_),
    .Y(_025_)
  );
  \and  _082_ (
    .A(\counter[19] ),
    .B(_043_),
    .Y(_026_)
  );
  \not  _083_ (
    .A(\counter[0] ),
    .Y(_044_)
  );
  \not  _084_ (
    .A(\counter[15] ),
    .Y(_045_)
  );
  \nor  _085_ (
    .A(_045_),
    .B(\counter[11] ),
    .Y(_046_)
  );
  \or  _086_ (
    .A(_045_),
    .B(\counter[11] ),
    .Y(_047_)
  );
  \and  _087_ (
    .A(_047_),
    .B(_046_),
    .Y(_048_)
  );
  \nor  _088_ (
    .A(_048_),
    .B(\counter[7] ),
    .Y(_049_)
  );
  \or  _089_ (
    .A(_048_),
    .B(\counter[7] ),
    .Y(_050_)
  );
  \nor  _090_ (
    .A(_050_),
    .B(_049_),
    .Y(_051_)
  );
  \nand  _091_ (
    .A(_051_),
    .B(_044_),
    .Y(_052_)
  );
  \and  _092_ (
    .A(_051_),
    .B(_044_),
    .Y(_053_)
  );
  \or  _093_ (
    .A(_053_),
    .B(_052_),
    .Y(_054_)
  );
  \and  _094_ (
    .A(_054_),
    .B(_043_),
    .Y(_027_)
  );
  \nand  _095_ (
    .A(key[0]),
    .B(_044_),
    .Y(_055_)
  );
  \and  _096_ (
    .A(key[0]),
    .B(_044_),
    .Y(_056_)
  );
  \or  _097_ (
    .A(_056_),
    .B(_055_),
    .Y(_000_)
  );
  \not  _098_ (
    .A(\counter[1] ),
    .Y(_057_)
  );
  \nand  _099_ (
    .A(key[1]),
    .B(_057_),
    .Y(_058_)
  );
  \and  _100_ (
    .A(key[1]),
    .B(_057_),
    .Y(_059_)
  );
  \or  _101_ (
    .A(_059_),
    .B(_058_),
    .Y(_001_)
  );
  \not  _102_ (
    .A(\counter[2] ),
    .Y(_060_)
  );
  \nand  _103_ (
    .A(key[2]),
    .B(_060_),
    .Y(_061_)
  );
  \and  _104_ (
    .A(key[2]),
    .B(_060_),
    .Y(_062_)
  );
  \or  _105_ (
    .A(_062_),
    .B(_061_),
    .Y(_002_)
  );
  \not  _106_ (
    .A(\counter[3] ),
    .Y(_028_)
  );
  \nand  _107_ (
    .A(key[3]),
    .B(_028_),
    .Y(_029_)
  );
  \and  _108_ (
    .A(key[3]),
    .B(_028_),
    .Y(_030_)
  );
  \or  _109_ (
    .A(_030_),
    .B(_029_),
    .Y(_003_)
  );
  \not  _110_ (
    .A(\counter[4] ),
    .Y(_031_)
  );
  \nand  _111_ (
    .A(key[4]),
    .B(_031_),
    .Y(_032_)
  );
  \and  _112_ (
    .A(key[4]),
    .B(_031_),
    .Y(_033_)
  );
  \or  _113_ (
    .A(_033_),
    .B(_032_),
    .Y(_004_)
  );
  \not  _114_ (
    .A(\counter[5] ),
    .Y(_034_)
  );
  \nand  _115_ (
    .A(key[5]),
    .B(_034_),
    .Y(_035_)
  );
  \and  _116_ (
    .A(key[5]),
    .B(_034_),
    .Y(_036_)
  );
  \or  _117_ (
    .A(_036_),
    .B(_035_),
    .Y(_005_)
  );
  \not  _118_ (
    .A(\counter[6] ),
    .Y(_037_)
  );
  \nand  _119_ (
    .A(key[6]),
    .B(_037_),
    .Y(_038_)
  );
  \and  _120_ (
    .A(key[6]),
    .B(_037_),
    .Y(_039_)
  );
  \or  _121_ (
    .A(_039_),
    .B(_038_),
    .Y(_006_)
  );
  \not  _122_ (
    .A(\counter[7] ),
    .Y(_040_)
  );
  \nand  _123_ (
    .A(key[7]),
    .B(_040_),
    .Y(_041_)
  );
  \and  _124_ (
    .A(key[7]),
    .B(_040_),
    .Y(_042_)
  );
  \or  _125_ (
    .A(_042_),
    .B(_041_),
    .Y(_007_)
  );
  dff _126_ (
    .C(clk),
    .D(_008_),
    .Q(\counter[0] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _127_ (
    .C(clk),
    .D(_009_),
    .Q(\counter[1] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _128_ (
    .C(clk),
    .D(_010_),
    .Q(\counter[2] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _129_ (
    .C(clk),
    .D(_011_),
    .Q(\counter[3] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _130_ (
    .C(clk),
    .D(_012_),
    .Q(\counter[4] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _131_ (
    .C(clk),
    .D(_013_),
    .Q(\counter[5] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _132_ (
    .C(clk),
    .D(_014_),
    .Q(\counter[6] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _133_ (
    .C(clk),
    .D(_015_),
    .Q(\counter[7] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _134_ (
    .C(clk),
    .D(_016_),
    .Q(\counter[8] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _135_ (
    .C(clk),
    .D(_017_),
    .Q(\counter[9] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _136_ (
    .C(clk),
    .D(_018_),
    .Q(\counter[10] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _137_ (
    .C(clk),
    .D(_019_),
    .Q(\counter[11] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _138_ (
    .C(clk),
    .D(_020_),
    .Q(\counter[12] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _139_ (
    .C(clk),
    .D(_021_),
    .Q(\counter[13] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _140_ (
    .C(clk),
    .D(_022_),
    .Q(\counter[14] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _141_ (
    .C(clk),
    .D(_023_),
    .Q(\counter[15] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _142_ (
    .C(clk),
    .D(_024_),
    .Q(\counter[16] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _143_ (
    .C(clk),
    .D(_025_),
    .Q(\counter[17] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _144_ (
    .C(clk),
    .D(_026_),
    .Q(\counter[18] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _145_ (
    .C(clk),
    .D(_027_),
    .Q(\counter[19] ),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _146_ (
    .C(clk),
    .D(_000_),
    .Q(load[7]),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _147_ (
    .C(clk),
    .D(_001_),
    .Q(load[15]),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _148_ (
    .C(clk),
    .D(_002_),
    .Q(load[23]),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _149_ (
    .C(clk),
    .D(_003_),
    .Q(load[31]),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _150_ (
    .C(clk),
    .D(_004_),
    .Q(load[39]),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _151_ (
    .C(clk),
    .D(_005_),
    .Q(load[47]),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _152_ (
    .C(clk),
    .D(_006_),
    .Q(load[55]),
    .RST(1'h0),
    .SET(1'h0)
  );
  dff _153_ (
    .C(clk),
    .D(_007_),
    .Q(load[63]),
    .RST(1'h0),
    .SET(1'h0)
  );
  assign load[6:0] = { load[7], load[7], load[7], load[7], load[7], load[7], load[7] };
  assign load[14:8] = { load[15], load[15], load[15], load[15], load[15], load[15], load[15] };
  assign load[22:16] = { load[23], load[23], load[23], load[23], load[23], load[23], load[23] };
  assign load[30:24] = { load[31], load[31], load[31], load[31], load[31], load[31], load[31] };
  assign load[38:32] = { load[39], load[39], load[39], load[39], load[39], load[39], load[39] };
  assign load[46:40] = { load[47], load[47], load[47], load[47], load[47], load[47], load[47] };
  assign load[54:48] = { load[55], load[55], load[55], load[55], load[55], load[55], load[55] };
  assign load[62:56] = { load[63], load[63], load[63], load[63], load[63], load[63], load[63] };
endmodule
