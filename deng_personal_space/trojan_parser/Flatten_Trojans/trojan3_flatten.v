/* Generated by Yosys 0.54 (git sha1 db72ec3bde296a9512b2d1e6fabf81cfb07c2c1b, clang++ 16.0.0 -fPIC -O3) */

module Trojan3(clk, rst, data_in, data_out);
  wire [15:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire [31:0] _034_;
  wire [31:0] _035_;
  input clk;
  wire clk;
  wire [7:0] counter;
  input [15:0] data_in;
  wire [15:0] data_in;
  output [15:0] data_out;
  reg [15:0] data_out;
  input rst;
  wire rst;
  \not  _036_ (
    .A(counter[0]),
    .Y(_034_[0])
  );
  \not  _037_ (
    .A(data_in[4]),
    .Y(_001_)
  );
  \not  _038_ (
    .A(data_in[9]),
    .Y(_002_)
  );
  \not  _039_ (
    .A(data_in[14]),
    .Y(_003_)
  );
  \or  _040_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_004_)
  );
  \or  _041_ (
    .A(counter[2]),
    .B(_004_),
    .Y(_005_)
  );
  \or  _042_ (
    .A(counter[3]),
    .B(_005_),
    .Y(_006_)
  );
  \or  _043_ (
    .A(counter[4]),
    .B(_006_),
    .Y(_007_)
  );
  \or  _044_ (
    .A(counter[5]),
    .B(_007_),
    .Y(_008_)
  );
  \or  _045_ (
    .A(counter[6]),
    .B(_008_),
    .Y(_009_)
  );
  \or  _046_ (
    .A(counter[7]),
    .B(_009_),
    .Y(_010_)
  );
  \nand  _047_ (
    .A(counter[7]),
    .B(_009_),
    .Y(_011_)
  );
  \nand  _048_ (
    .A(data_in[1]),
    .B(_010_),
    .Y(_012_)
  );
  \xnor  _049_ (
    .A(data_in[1]),
    .B(_011_),
    .Y(_000_[1])
  );
  \nand  _050_ (
    .A(data_in[1]),
    .B(data_in[2]),
    .Y(_013_)
  );
  \nor  _051_ (
    .A(_011_),
    .B(_013_),
    .Y(_014_)
  );
  \xnor  _052_ (
    .A(data_in[2]),
    .B(_012_),
    .Y(_000_[2])
  );
  \nand  _053_ (
    .A(data_in[3]),
    .B(_014_),
    .Y(_015_)
  );
  \xor  _054_ (
    .A(data_in[3]),
    .B(_014_),
    .Y(_000_[3])
  );
  \nor  _055_ (
    .A(_001_),
    .B(_015_),
    .Y(_016_)
  );
  \xnor  _056_ (
    .A(data_in[4]),
    .B(_015_),
    .Y(_000_[4])
  );
  \xor  _057_ (
    .A(data_in[5]),
    .B(_016_),
    .Y(_000_[5])
  );
  \or  _058_ (
    .A(data_in[4]),
    .B(data_in[5]),
    .Y(_017_)
  );
  \nand  _059_ (
    .A(data_in[3]),
    .B(_017_),
    .Y(_018_)
  );
  \nor  _060_ (
    .A(_013_),
    .B(_018_),
    .Y(_019_)
  );
  \nand  _061_ (
    .A(_010_),
    .B(_019_),
    .Y(_020_)
  );
  \xnor  _062_ (
    .A(data_in[6]),
    .B(_020_),
    .Y(_000_[6])
  );
  \or  _063_ (
    .A(data_in[6]),
    .B(_019_),
    .Y(_021_)
  );
  \nand  _064_ (
    .A(_010_),
    .B(_021_),
    .Y(_022_)
  );
  \xnor  _065_ (
    .A(data_in[7]),
    .B(_022_),
    .Y(_000_[7])
  );
  \or  _066_ (
    .A(data_in[7]),
    .B(_021_),
    .Y(_023_)
  );
  \nand  _067_ (
    .A(_010_),
    .B(_023_),
    .Y(_024_)
  );
  \xnor  _068_ (
    .A(data_in[8]),
    .B(_024_),
    .Y(_000_[8])
  );
  \nand  _069_ (
    .A(data_in[8]),
    .B(_023_),
    .Y(_025_)
  );
  \nor  _070_ (
    .A(_011_),
    .B(_025_),
    .Y(_026_)
  );
  \xnor  _071_ (
    .A(_002_),
    .B(_026_),
    .Y(_000_[9])
  );
  \and  _072_ (
    .A(_002_),
    .B(_025_),
    .Y(_027_)
  );
  \nor  _073_ (
    .A(_011_),
    .B(_027_),
    .Y(_028_)
  );
  \or  _074_ (
    .A(data_in[10]),
    .B(_028_),
    .Y(_029_)
  );
  \xor  _075_ (
    .A(data_in[10]),
    .B(_028_),
    .Y(_000_[10])
  );
  \or  _076_ (
    .A(data_in[11]),
    .B(_029_),
    .Y(_030_)
  );
  \xor  _077_ (
    .A(data_in[11]),
    .B(_029_),
    .Y(_000_[11])
  );
  \or  _078_ (
    .A(data_in[12]),
    .B(_030_),
    .Y(_031_)
  );
  \xor  _079_ (
    .A(data_in[12]),
    .B(_030_),
    .Y(_000_[12])
  );
  \nand  _080_ (
    .A(data_in[13]),
    .B(_031_),
    .Y(_032_)
  );
  \xor  _081_ (
    .A(data_in[13]),
    .B(_031_),
    .Y(_000_[13])
  );
  \and  _082_ (
    .A(_003_),
    .B(_032_),
    .Y(_033_)
  );
  \xnor  _083_ (
    .A(data_in[14]),
    .B(_032_),
    .Y(_000_[14])
  );
  \xnor  _084_ (
    .A(data_in[15]),
    .B(_033_),
    .Y(_000_[15])
  );
  \xor  _085_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_035_[1])
  );
  \xor  _086_ (
    .A(counter[2]),
    .B(_004_),
    .Y(_035_[2])
  );
  \xor  _087_ (
    .A(counter[3]),
    .B(_005_),
    .Y(_035_[3])
  );
  \xor  _088_ (
    .A(counter[4]),
    .B(_006_),
    .Y(_035_[4])
  );
  \xor  _089_ (
    .A(counter[5]),
    .B(_007_),
    .Y(_035_[5])
  );
  \xor  _090_ (
    .A(counter[6]),
    .B(_008_),
    .Y(_035_[6])
  );
  \xor  _091_ (
    .A(counter[7]),
    .B(_009_),
    .Y(_035_[7])
  );
  always @(posedge clk, posedge rst)
    if (rst) data_out[0] <= data_in[0];
    else data_out[0] <= data_in[0];
  always @(posedge clk, posedge rst)
    if (rst) data_out[1] <= data_in[1];
    else data_out[1] <= _000_[1];
  always @(posedge clk, posedge rst)
    if (rst) data_out[2] <= data_in[2];
    else data_out[2] <= _000_[2];
  always @(posedge clk, posedge rst)
    if (rst) data_out[3] <= data_in[3];
    else data_out[3] <= _000_[3];
  always @(posedge clk, posedge rst)
    if (rst) data_out[4] <= data_in[4];
    else data_out[4] <= _000_[4];
  always @(posedge clk, posedge rst)
    if (rst) data_out[5] <= data_in[5];
    else data_out[5] <= _000_[5];
  always @(posedge clk, posedge rst)
    if (rst) data_out[6] <= data_in[6];
    else data_out[6] <= _000_[6];
  always @(posedge clk, posedge rst)
    if (rst) data_out[7] <= data_in[7];
    else data_out[7] <= _000_[7];
  always @(posedge clk, posedge rst)
    if (rst) data_out[8] <= data_in[8];
    else data_out[8] <= _000_[8];
  always @(posedge clk, posedge rst)
    if (rst) data_out[9] <= data_in[9];
    else data_out[9] <= _000_[9];
  always @(posedge clk, posedge rst)
    if (rst) data_out[10] <= data_in[10];
    else data_out[10] <= _000_[10];
  always @(posedge clk, posedge rst)
    if (rst) data_out[11] <= data_in[11];
    else data_out[11] <= _000_[11];
  always @(posedge clk, posedge rst)
    if (rst) data_out[12] <= data_in[12];
    else data_out[12] <= _000_[12];
  always @(posedge clk, posedge rst)
    if (rst) data_out[13] <= data_in[13];
    else data_out[13] <= _000_[13];
  always @(posedge clk, posedge rst)
    if (rst) data_out[14] <= data_in[14];
    else data_out[14] <= _000_[14];
  always @(posedge clk, posedge rst)
    if (rst) data_out[15] <= data_in[15];
    else data_out[15] <= _000_[15];
  dff _108_ (
    .C(clk),
    .D(_034_[0]),
    .Q(counter[0]),
    .RST(rst),
    .SET(1'h0)
  );
  dff _109_ (
    .C(clk),
    .D(_035_[1]),
    .Q(counter[1]),
    .RST(rst),
    .SET(1'h0)
  );
  dff _110_ (
    .C(clk),
    .D(_035_[2]),
    .Q(counter[2]),
    .RST(rst),
    .SET(1'h0)
  );
  dff _111_ (
    .C(clk),
    .D(_035_[3]),
    .Q(counter[3]),
    .RST(rst),
    .SET(1'h0)
  );
  dff _112_ (
    .C(clk),
    .D(_035_[4]),
    .Q(counter[4]),
    .RST(rst),
    .SET(1'h0)
  );
  dff _113_ (
    .C(clk),
    .D(_035_[5]),
    .Q(counter[5]),
    .RST(rst),
    .SET(1'h0)
  );
  dff _114_ (
    .C(clk),
    .D(_035_[6]),
    .Q(counter[6]),
    .RST(rst),
    .SET(1'h0)
  );
  dff _115_ (
    .C(clk),
    .D(_035_[7]),
    .Q(counter[7]),
    .RST(rst),
    .SET(1'h0)
  );
  assign _000_[0] = data_in[0];
  assign _034_[31:1] = { 24'h000000, counter[7:1] };
  assign { _035_[31:9], _035_[0] } = { 23'h000000, _034_[0] };
endmodule
